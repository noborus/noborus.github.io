<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on Noboru Saito's page</title><link>https://noborus.github.io/tags/mysql/index.html</link><description>Recent content in mysql on Noboru Saito's page</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 10 Feb 2020 15:09:00 +0900</lastBuildDate><atom:link href="https://noborus.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>trdsql MySQLエンジンの使用</title><link>https://noborus.github.io/trdsql/13_mysql/index.html</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/trdsql/13_mysql/index.html</guid><description>前回はPostgreSQL接続の話でしたが、今度はMySQLに接続して使用する方法を説明します。
MySQLに接続 MySQLに接続するには動作しているMySQLサーバーが必要です。接続できテーブルが作成できる権限があるデータベースを作成しておきます。
オプションの -driver に mysql を指定し、-dsn にサーバーへの接続情報を指定します。
MySQLのdsnは以下のような形式です。
ユーザー名:パスワード@プロトコル(ホスト名:ポート番号)/データベース名?param=value param=valueのパラメーターは多くの種類がありますので、go-sql-driverを参照して下さい。
UNIXドメインソケット ローカルホストのデフォルトのUNIXドメインソケットを使用する場合は、ユーザー名、パスワード、データベース名を指定すれば接続できます。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; UNIXドメインソケットのパスを指定するには、プロトコルにunixを指定して、unix(パス)で指定します。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@unix(/var/run/mysqld/mysqld.sock)/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; TCP接続 TCPはプロトコルにtcpを指定して、tcp(ホスト名:ポート番号)を指定します。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@tcp(localhost:3306)/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; 実テーブルの出力 接続できれば、これまでと同じようにSQLが実行できますが、実際に実行されるのはMySQL上なので、MySQLが実行できるSQLを書く必要があります。
前回のPostgreSQLと同様にMySQLのテーブルに対してSQLを実行し、オプションで指定したフォーマットで出力することが出来ます。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@/trdsql_test&amp;#34; -oat -ih &amp;#34;SELECT * FROM actor LIMIT 10&amp;#34; +----------+------------+--------------+---------------------+ | actor_id | first_name | last_name | last_update | +----------+------------+--------------+---------------------+ | 1 | PENELOPE | GUINESS | 2006-02-15 04:34:33 | | 2 | NICK | WAHLBERG | 2006-02-15 04:34:33 | | 3 | ED | CHASE | 2006-02-15 04:34:33 | | 4 | JENNIFER | DAVIS | 2006-02-15 04:34:33 | | 5 | JOHNNY | LOLLOBRIGIDA | 2006-02-15 04:34:33 | | 6 | BETTE | NICHOLSON | 2006-02-15 04:34:33 | | 7 | GRACE | MOSTEL | 2006-02-15 04:34:33 | | 8 | MATTHEW | JOHANSSON | 2006-02-15 04:34:33 | | 9 | JOE | SWANK | 2006-02-15 04:34:33 | | 10 | CHRISTIAN | GABLE | 2006-02-15 04:34:33 | +----------+------------+--------------+---------------------+</description></item><item><title>trdsql DBインポート</title><link>https://noborus.github.io/trdsql/15_import/index.html</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/trdsql/15_import/index.html</guid><description>trdsqlにはデータベースにインポートするオプションはありません。 しかしながら、SELECT以外のSQLの実行も可能なので、SQLによるインポートが可能です。
以下は、メモリデータベースにインポートしても終了すると消えてしまうので、メモリデータベース以外のデータベースに接続して実行します。
CREATE TABLE AS テーブルを作成してインポートするには CREATE TABLE ASを使用します。
PostgreSQL で CREATE TABLE AS まず、PostgreSQLへデータをインポートしてみます。 これまで、SELECTで実行してきた内容に CREATE TABLE テーブル名 AS を前につければ、テーブルが作成されデータがインポートされます。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih \ &amp;#34;CREATE TABLE test AS SELECT * FROM header.csv&amp;#34; 成功した場合、何も表示されずに終了します。失敗した場合、エラーが表示されます。
SELECTの結果がインポートされるため、SELECT側で列名の変更、列の型指定、インポートするデータの条件指定をすれば良いことになります。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih \ &amp;#34;CREATE TABLE fruits AS SELECT id::int AS num, name::VARCHAR(20) FROM header.csv&amp;#34; trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih -oh\ &amp;#34;SELECT * FROM fruits&amp;#34; num,name 1,Orange 2,Melon 3,Apple もし、テーブルの作成のみを先にして、INSERTを後でおこないたい場合はWITH NO DATAを付けます。</description></item><item><title>trdsql 合計を行に追加する</title><link>https://noborus.github.io/trdsql/31_rollup/index.html</link><pubDate>Sat, 04 Jan 2020 13:38:00 +0900</pubDate><guid>https://noborus.github.io/trdsql/31_rollup/index.html</guid><description>Window関数により元のファイルの内容に列を追加して、集計結果を出せました。 ただ、人が確認する場合は、集計の結果行が最後に出るほうが確認しやすくなります。
通常のSQLでも元の内容と集計結果を別々に出してUNIONを使うことで、一つの結果として出すことが出来ますが、一回で済むならばそれに越したことはありません。
SQLite3ではサポートされていませんが、PostgreSQLとMySQLならばサポートされている文があります。
ROLLUP Window関数でも使用した以下のCSVファイルを使用します。
id,class,name,score 1,A,bob,174 2,A,alice,248 3,A,carol,163 4,B,dave,289 5,B,eve,157 6,B,flank,272 通常のGROUP BYで全体の合計又は、class毎の合計が出せました。 ただし、class毎の合計と全体の合計を出すにはWindow関数を使用して別の列に出していました。
GROUP BYに ROLLUPを指定することで、両方を出力できます。
PostgreSQL PostgreSQLでは、GROUP BY 列名の代わりにGROUP BY ROLLUP(列名)を使用することで、通常のGROUP BYに加えて、全体の集計結果を出力します。
trdsql -driver &amp;#34;postgres&amp;#34; -dsn &amp;#34;dbname=trdsql_test&amp;#34; -oat -ih \ &amp;#34;SELECT class, SUM(score::int) AS score FROM score.csv GROUP BY ROLLUP(class) ORDER BY class&amp;#34; +-------+------+ | class | sum | +-------+------+ | A | 585 | | B | 718 | | | 1303 | +-------+------+ MySQL MySQLでは、GROUP BY 列名の後に WITH ROLLUPを付けると、通常のGROUP BYに加えて、全体の集計結果を出力します。</description></item><item><title>MySQL の LOAD DATA INFILE (go)</title><link>https://noborus.github.io/blog/mysql-load/index.html</link><pubDate>Mon, 10 Feb 2020 15:09:00 +0900</pubDate><guid>https://noborus.github.io/blog/mysql-load/index.html</guid><description>前提 LOAD DATA INFILEはMySQLサーバーがファイルを読み取ってデータベースのテーブルにインポートする構文ですが、LOAD DATA LOCAL INFILEはクライアント側のファイル（の内容）をサーバー側に送信してインポートします。
このLOCAL指定ですが、セキュリティ上の問題を抱えているため、最近のバージョンだとデフォルトで使用できない設定に変更されたりしています。
そもそも LOAD DATA LOCAL INFILE の仕組みは、MySQLのLOAD DATA構文を（クライアント側ではパースして解釈しないので）サーバー側に送ってLOCAL INFILEの場合ファイル名をクライアントに伝えて、クライアントがそのファイル（の中身）をサーバー側に送信するようになっています。
サーバー側からLOAD DATA LOCAL INFILEに書いてあったファイル名とは違うファイル名を伝えられてもそのファイルを送信してしまう可能性があるため、セキュリティのリスクがあります。
LOAD DATA LOCAL INFILE(go) goのmysqlドライバでは、LOAD DATA LOCAL INFILE supportにあるように mysql.RegisterLocalFile(filepath)やmysql.RegisterReaderHandler(name, handler)という関数が追加されていてセキュリティ上の問題を解決するような拡張がされています。
mysql.RegisterLocalFile(filepath)は、LOAD DATA LOCAL INFILEを実行する前にあらかじめ送信するファイル名を登録しておいて、登録してあるファイルのみを送信することでリスクを軽減しています。
mysql.RegisterLocalFile(&amp;#34;/tmp/test.csv&amp;#34;) db.Exec(&amp;#34;LOAD DATA LOCAL INFILE &amp;#39;/tmp/test.csv&amp;#39; INTO TABLE test&amp;#34;) また、mysql.RegisterReaderHandler(name, handler)では、あらかじめクライアントプログラム側がファイルを開く等してできたio.Readerインターフェイスを&amp;lt;name&amp;gt;と共に登録しておき、LOAD DATA LOCAL INFILE 'Reader::\&amp;lt;name\&amp;gt;' INTO TABLE テーブル名 によりio.ReaderからReadしてサーバー側に送信します。
mysql.RegisterReaderHandler(&amp;#34;test&amp;#34;, func() io.Reader { file, err = os.Open(&amp;#34;/tmp/test.csv&amp;#34;) if err != nil { return nil } return file }) db.</description></item><item><title>trdsql 合計を行に追加する</title><link>https://noborus.github.io/blog/31_rollup/index.html</link><pubDate>Sat, 04 Jan 2020 13:38:00 +0900</pubDate><guid>https://noborus.github.io/blog/31_rollup/index.html</guid><description>Window関数により元のファイルの内容に列を追加して、集計結果を出せました。 ただ、人が確認する場合は、集計の結果行が最後に出るほうが確認しやすくなります。
通常のSQLでも元の内容と集計結果を別々に出してUNIONを使うことで、一つの結果として出すことが出来ますが、一回で済むならばそれに越したことはありません。
SQLite3ではサポートされていませんが、PostgreSQLとMySQLならばサポートされている文があります。
ROLLUP Window関数でも使用した以下のCSVファイルを使用します。
id,class,name,score 1,A,bob,174 2,A,alice,248 3,A,carol,163 4,B,dave,289 5,B,eve,157 6,B,flank,272 通常のGROUP BYで全体の合計又は、class毎の合計が出せました。 ただし、class毎の合計と全体の合計を出すにはWindow関数を使用して別の列に出していました。
GROUP BYに ROLLUPを指定することで、両方を出力できます。
PostgreSQL PostgreSQLでは、GROUP BY 列名の代わりにGROUP BY ROLLUP(列名)を使用することで、通常のGROUP BYに加えて、全体の集計結果を出力します。
trdsql -driver &amp;#34;postgres&amp;#34; -dsn &amp;#34;dbname=trdsql_test&amp;#34; -oat -ih \ &amp;#34;SELECT class, SUM(score::int) AS score FROM score.csv GROUP BY ROLLUP(class) ORDER BY class&amp;#34; +-------+------+ | class | sum | +-------+------+ | A | 585 | | B | 718 | | | 1303 | +-------+------+ MySQL MySQLでは、GROUP BY 列名の後に WITH ROLLUPを付けると、通常のGROUP BYに加えて、全体の集計結果を出力します。</description></item><item><title>trdsql DBインポート</title><link>https://noborus.github.io/blog/15_import/index.html</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/15_import/index.html</guid><description>trdsqlにはデータベースにインポートするオプションはありません。 しかしながら、SELECT以外のSQLの実行も可能なので、SQLによるインポートが可能です。
以下は、メモリデータベースにインポートしても終了すると消えてしまうので、メモリデータベース以外のデータベースに接続して実行します。
CREATE TABLE AS テーブルを作成してインポートするには CREATE TABLE ASを使用します。
PostgreSQL で CREATE TABLE AS まず、PostgreSQLへデータをインポートしてみます。 これまで、SELECTで実行してきた内容に CREATE TABLE テーブル名 AS を前につければ、テーブルが作成されデータがインポートされます。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih \ &amp;#34;CREATE TABLE test AS SELECT * FROM header.csv&amp;#34; 成功した場合、何も表示されずに終了します。失敗した場合、エラーが表示されます。
SELECTの結果がインポートされるため、SELECT側で列名の変更、列の型指定、インポートするデータの条件指定をすれば良いことになります。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih \ &amp;#34;CREATE TABLE fruits AS SELECT id::int AS num, name::VARCHAR(20) FROM header.csv&amp;#34; trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; -ih -oh\ &amp;#34;SELECT * FROM fruits&amp;#34; num,name 1,Orange 2,Melon 3,Apple もし、テーブルの作成のみを先にして、INSERTを後でおこないたい場合はWITH NO DATAを付けます。</description></item><item><title>trdsql MySQLエンジンの使用</title><link>https://noborus.github.io/blog/13_mysql/index.html</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/13_mysql/index.html</guid><description>前回はPostgreSQL接続の話でしたが、今度はMySQLに接続して使用する方法を説明します。
MySQLに接続 MySQLに接続するには動作しているMySQLサーバーが必要です。接続できテーブルが作成できる権限があるデータベースを作成しておきます。
オプションの -driver に mysql を指定し、-dsn にサーバーへの接続情報を指定します。
MySQLのdsnは以下のような形式です。
ユーザー名:パスワード@プロトコル(ホスト名:ポート番号)/データベース名?param=value param=valueのパラメーターは多くの種類がありますので、go-sql-driverを参照して下さい。
UNIXドメインソケット ローカルホストのデフォルトのUNIXドメインソケットを使用する場合は、ユーザー名、パスワード、データベース名を指定すれば接続できます。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; UNIXドメインソケットのパスを指定するには、プロトコルにunixを指定して、unix(パス)で指定します。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@unix(/var/run/mysqld/mysqld.sock)/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; TCP接続 TCPはプロトコルにtcpを指定して、tcp(ホスト名:ポート番号)を指定します。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@tcp(localhost:3306)/trdsql_test&amp;#34; &amp;#34;SELECT 1&amp;#34; 実テーブルの出力 接続できれば、これまでと同じようにSQLが実行できますが、実際に実行されるのはMySQL上なので、MySQLが実行できるSQLを書く必要があります。
前回のPostgreSQLと同様にMySQLのテーブルに対してSQLを実行し、オプションで指定したフォーマットで出力することが出来ます。
trdsql -driver mysql -dsn &amp;#34;noborus:noborus@/trdsql_test&amp;#34; -oat -ih &amp;#34;SELECT * FROM actor LIMIT 10&amp;#34; +----------+------------+--------------+---------------------+ | actor_id | first_name | last_name | last_update | +----------+------------+--------------+---------------------+ | 1 | PENELOPE | GUINESS | 2006-02-15 04:34:33 | | 2 | NICK | WAHLBERG | 2006-02-15 04:34:33 | | 3 | ED | CHASE | 2006-02-15 04:34:33 | | 4 | JENNIFER | DAVIS | 2006-02-15 04:34:33 | | 5 | JOHNNY | LOLLOBRIGIDA | 2006-02-15 04:34:33 | | 6 | BETTE | NICHOLSON | 2006-02-15 04:34:33 | | 7 | GRACE | MOSTEL | 2006-02-15 04:34:33 | | 8 | MATTHEW | JOHANSSON | 2006-02-15 04:34:33 | | 9 | JOE | SWANK | 2006-02-15 04:34:33 | | 10 | CHRISTIAN | GABLE | 2006-02-15 04:34:33 | +----------+------------+--------------+---------------------+</description></item></channel></rss>