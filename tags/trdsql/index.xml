<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>trdsql on Noboru Saito's page</title><link>https://noborus.github.io/tags/trdsql/index.html</link><description>Recent content in trdsql on Noboru Saito's page</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 03 May 2022 12:58:24 +0900</lastBuildDate><atom:link href="https://noborus.github.io/tags/trdsql/index.xml" rel="self" type="application/rss+xml"/><item><title>trdsql install</title><link>https://noborus.github.io/trdsql/01_install/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noborus.github.io/trdsql/01_install/index.html</guid><description>Install For Linux/Windows/macOS, Download. It is made in Go and has no other dependent libraries, so it can be deployed and executed immediately.
Docker If Docker is available, you can also run it with Docker. You can also use docker pull from Docker Hub, so please pull as follows.
docker pull noborus/trdsql Mount and use the input file location. Since the result is output to the standard output, it can be received by redirection as it is.</description></item><item><title>Another way to aggregate json(jq + SQL)</title><link>https://noborus.github.io/blog/jqsql/index.html</link><pubDate>Tue, 03 May 2022 12:58:24 +0900</pubDate><guid>https://noborus.github.io/blog/jqsql/index.html</guid><description>Aggregate json with trdsql I agree that the aggregation of jq described in the Introducing zq is not easy.
I&amp;rsquo;ve seen A Practical Example of zq, zq was not easy for me.
SQL is not easy for everyone, but it is a language that many people can use. I am one of them.
Of course, it is difficult to process all JSON with SQL. But what about using them in combination?</description></item></channel></rss>