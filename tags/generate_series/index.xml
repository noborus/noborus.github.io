<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generate_series on Noboru Saito&#39;s page</title>
    <link>https://noborus.github.io/tags/generate_series/index.html</link>
    <description>Recent content in generate_series on Noboru Saito&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://noborus.github.io/tags/generate_series/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>trdsql generate_series</title>
      <link>https://noborus.github.io/trdsql/29_generate_series/index.html</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/trdsql/29_generate_series/index.html</guid>
      <description>generate_series PostgreSQLにはgenerate_series()という便利な関数があります。 これはUnixのseqコマンドと同じような働きをする関数です。またgenerate_series()は、タイムスタンプ型にも使用できる拡張があります。
使い方は簡単で「開始値」、「終了値」、「刻み値（省略可能）」を指定して実行します。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; &amp;#34;SELECT * FROM generate_series(1,10)&amp;#34; 1 2 3 4 5 6 7 8 9 10generate_series()はテーブルを返す関数で、テーブルの代わりに使用できます。 （SELECT generate_series(1,10)と書くこともできます）。
もちろん、trdsqlでは、外部からの入力を簡単に取り入れられるので、seqコマンドで代用することもできます。
seq 1 10|trdsql &amp;#34;SELECT * FROM -&amp;#34; 1 2 3 4 5 6 7 8 9 10seqコマンドは、引数の順序が「開始値」、「刻み値（省略可能）」「終了値」になります。 2つの値を渡すときには同じですが、刻み値を指定する場合は、順序が異なるので注意が必要です。
タイムスタンプ generate_series()では、タイムスタンプを扱えるので、2020年のカレンダーを日本語で出すと少々トリッキーですが、以下のようになります。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; \ &amp;#34;SET LC_TIME=&amp;#39;ja_JP.UTF-8&amp;#39;; &amp;#34; \ &amp;#34;SELECT to_char(day,&amp;#39;YYYY年TMMonthDD日 (TMDay)&amp;#39;) &amp;#34; \ &amp;#34; FROM generate_series(&amp;#39;2020-01-1&amp;#39;::timestamp,&amp;#39;2020-12-31&amp;#39;,&amp;#39;1 day&amp;#39;) as day&amp;#34; 2020年1月01日 (水曜日) 2020年1月02日 (木曜日) 2020年1月03日 (金曜日) 2020年1月04日 (土曜日) .</description>
    </item>
    <item>
      <title>trdsql generate_series</title>
      <link>https://noborus.github.io/blog/29_generate_series/index.html</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/blog/29_generate_series/index.html</guid>
      <description>generate_series PostgreSQLにはgenerate_series()という便利な関数があります。 これはUnixのseqコマンドと同じような働きをする関数です。またgenerate_series()は、タイムスタンプ型にも使用できる拡張があります。
使い方は簡単で「開始値」、「終了値」、「刻み値（省略可能）」を指定して実行します。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; &amp;#34;SELECT * FROM generate_series(1,10)&amp;#34; 1 2 3 4 5 6 7 8 9 10generate_series()はテーブルを返す関数で、テーブルの代わりに使用できます。 （SELECT generate_series(1,10)と書くこともできます）。
もちろん、trdsqlでは、外部からの入力を簡単に取り入れられるので、seqコマンドで代用することもできます。
seq 1 10|trdsql &amp;#34;SELECT * FROM -&amp;#34; 1 2 3 4 5 6 7 8 9 10seqコマンドは、引数の順序が「開始値」、「刻み値（省略可能）」「終了値」になります。 2つの値を渡すときには同じですが、刻み値を指定する場合は、順序が異なるので注意が必要です。
タイムスタンプ generate_series()では、タイムスタンプを扱えるので、2020年のカレンダーを日本語で出すと少々トリッキーですが、以下のようになります。
trdsql -driver postgres -dsn &amp;#34;dbname=trdsql_test&amp;#34; \ &amp;#34;SET LC_TIME=&amp;#39;ja_JP.UTF-8&amp;#39;; &amp;#34; \ &amp;#34;SELECT to_char(day,&amp;#39;YYYY年TMMonthDD日 (TMDay)&amp;#39;) &amp;#34; \ &amp;#34; FROM generate_series(&amp;#39;2020-01-1&amp;#39;::timestamp,&amp;#39;2020-12-31&amp;#39;,&amp;#39;1 day&amp;#39;) as day&amp;#34; 2020年1月01日 (水曜日) 2020年1月02日 (木曜日) 2020年1月03日 (金曜日) 2020年1月04日 (土曜日) .</description>
    </item>
  </channel>
</rss>