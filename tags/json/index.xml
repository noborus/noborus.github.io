<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on Noboru Saito&#39;s page</title><link>https://noborus.github.io/tags/json/</link><description>Recent content in json on Noboru Saito&#39;s page</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy;Noboru Saito 2019</copyright><lastBuildDate>Sun, 22 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://noborus.github.io/tags/json/index.xml" rel="self" type="application/rss+xml"/><item><title>trdsql JSON出力</title><link>https://noborus.github.io/blog/22_json_output/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/22_json_output/</guid><description>CSVやLTSVなどのフラットな形式のデータは、JSONにしたいときには（-ojsonによる）JSON出力をすれば良いですが、JSONは本来より深い階層も表現できるフォーマットです。 そのようなJSONは、データベースのJSON関数を使用することにより作成できます。 以下のCSVから</description></item><item><title>trdsql JSON解析</title><link>https://noborus.github.io/blog/21_json_parse/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/21_json_parse/</guid><description>これまでtrdsqlでは、JSONの入力が可能と書きましたが、例として書いたのは基本的にフラットな構造のJSONでした。 ただ、２階層以上の階層構造が含まれるJSONはエラーになる訳ではなく、そのまま文字列として扱われます。 以下のようなJSONがあるとします。 sample.json [ { &amp;#34;color&amp;#34;: &amp;#34;white&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;code&amp;#34;: { &amp;#34;rgba&amp;#34;: [0,</description></item><item><title>trdsql 目次</title><link>https://noborus.github.io/blog/00_index/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/00_index/</guid><description>trdsql Advent Calendar 2019として書かれています。 インストール 変換 簡単なSQL 簡単なSQLその2 集計 集計計算 グループ集計 ログ集計 ワイルドカード、圧縮ファイル 標準入力 処理の概要 PostgreSQLエンジンの使用 MySQLエンジンの使用 SQLite3エンジンの使用 DBインポート JOIN ファイルとテーブル</description></item></channel></rss>