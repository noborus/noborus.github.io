<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WHERE on Noboru Saito&#39;s page</title>
    <link>https://noborus.github.io/tags/where/index.html</link>
    <description>Recent content in WHERE on Noboru Saito&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Dec 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://noborus.github.io/tags/where/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>trdsql 簡単なSQL その２</title>
      <link>https://noborus.github.io/trdsql/04_sql2/index.html</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/trdsql/04_sql2/index.html</guid>
      <description>検索条件 前回、列の並べ替え、抽出、行の並べ替えをしたので、今回は行の抽出です。 行を抽出するには、WHEREを付けて、検索条件を書きます。
前回と同じ例のファイルを使います。
trdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv WHERE id=1&amp;#34; 1,OrangeSQLのメインな機能ですね。検索条件を書くだけで、該当する行を出力できます。
AND, OR AND や OR や ()括弧を使用することにより複雑な条件が書けます。
trdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv WHERE id=&amp;#39;1&amp;#39; OR id=&amp;#39;2&amp;#39;&amp;#34; 1,Orange 2,Melontrdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv &amp;#34; &amp;#34;WHERE (id=&amp;#39;1&amp;#39; OR id=&amp;#39;2&amp;#39;) AND \`name\`=&amp;#39;Orange&amp;#39;&amp;#34; 1,Orange前回にも書いたようにtrdsqlでは、CSVやLTSV、JSONの値をtext型として扱っています。そのため、「=」の条件で書いているときには、暗黙のCASTが効いて型をそれほど意識しなくても良いですが、範囲を指定するときには結果が変わってしまうので、CASTする必要があります。
trdsql -ih &amp;#34;SELECT id,\`name\` FROM header.csv &amp;#34; &amp;#34;WHERE CAST(id as int)&amp;gt;1&amp;#34; 2,Melon 3,AppleSELECTを使用するときは、列の指定のところでCASTを使用して、そのCASTした列を指定して検索条件やORDER BYを書くことが出来ます。
その際には元の列名はCAST前の列を指しているので、AS 別名を使用してCAST後の列名を使用します（CAST後の列名に元の名前を付けることは出来ます）。
trdsql -ih &amp;#34;SELECT CAST(id AS int) AS id,\`name\` FROM header.</description>
    </item>
    <item>
      <title>trdsql 簡単なSQL その２</title>
      <link>https://noborus.github.io/blog/04_sql2/index.html</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/blog/04_sql2/index.html</guid>
      <description>検索条件 前回、列の並べ替え、抽出、行の並べ替えをしたので、今回は行の抽出です。 行を抽出するには、WHEREを付けて、検索条件を書きます。
前回と同じ例のファイルを使います。
trdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv WHERE id=1&amp;#34; 1,OrangeSQLのメインな機能ですね。検索条件を書くだけで、該当する行を出力できます。
AND, OR AND や OR や ()括弧を使用することにより複雑な条件が書けます。
trdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv WHERE id=&amp;#39;1&amp;#39; OR id=&amp;#39;2&amp;#39;&amp;#34; 1,Orange 2,Melontrdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv &amp;#34; &amp;#34;WHERE (id=&amp;#39;1&amp;#39; OR id=&amp;#39;2&amp;#39;) AND \`name\`=&amp;#39;Orange&amp;#39;&amp;#34; 1,Orange前回にも書いたようにtrdsqlでは、CSVやLTSV、JSONの値をtext型として扱っています。そのため、「=」の条件で書いているときには、暗黙のCASTが効いて型をそれほど意識しなくても良いですが、範囲を指定するときには結果が変わってしまうので、CASTする必要があります。
trdsql -ih &amp;#34;SELECT id,\`name\` FROM header.csv &amp;#34; &amp;#34;WHERE CAST(id as int)&amp;gt;1&amp;#34; 2,Melon 3,AppleSELECTを使用するときは、列の指定のところでCASTを使用して、そのCASTした列を指定して検索条件やORDER BYを書くことが出来ます。
その際には元の列名はCAST前の列を指しているので、AS 別名を使用してCAST後の列名を使用します（CAST後の列名に元の名前を付けることは出来ます）。
trdsql -ih &amp;#34;SELECT CAST(id AS int) AS id,\`name\` FROM header.</description>
    </item>
  </channel>
</rss>