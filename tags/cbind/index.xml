<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cbind on Noboru Saito's page</title><link>https://noborus.github.io/tags/cbind/index.html</link><description>Recent content in cbind on Noboru Saito's page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 Oct 2020 10:00:00 +0900</lastBuildDate><atom:link href="https://noborus.github.io/tags/cbind/index.xml" rel="self" type="application/rss+xml"/><item><title>tcell/tviewでTUIを作るならキー割り当てにcbindを利用しよう</title><link>https://noborus.github.io/blog/cbind/index.html</link><pubDate>Tue, 27 Oct 2020 10:00:00 +0900</pubDate><guid>https://noborus.github.io/blog/cbind/index.html</guid><description>cbindとは？ cbindはtcellのキーイベントとイベントハンドラを結びつけるライブラリです。
tcellのキーイベント tcell ではキー入力がイベントの１つとして取得できます。 tviewでもtcellのイベントを使用しているので、同じ様にイベントとして取得します。
tcellのキーイベントを取得するのは以下のようにswitch caseでキーを判別して、イベントハンドラを呼び出すのが一般的です。
ev := screen.PollEvent() switch ev := ev.(type) { case *tcell.EventKey: switch ev.Key() { case tcell.KeyEscape: close(quit) return } case tcell.KeyEnter: action() return } ここのtcell.KeyEscapeは constの数値として定義されています（キーボードに存在する英数字などの文字はruneで入ってきます）。 キー割り当てが少ないうちは、このまま追加していけば機能を増やせるので分かりやすいですが、キー割り当てが多くなってくると以下のような問題が出てきます。
修飾キー(CTRL、ALT&amp;hellip;)が押された場合に動作が変わる場合はさらに分岐する キー割り当てをドキュメント化するのが大変になる キー割り当てのヘルプが必要になる キー割り当てを人によって変更したくなる ドキュメント化やヘルプはコードで実装した後、手間を掛けて書いていけばなんとか解決できますが、キー割り当ての変更に対応するには、元のままのコードでは不可能です。
cbindを使用 そこで使用したいのがcbindです。
cbind は Set()でキーの文字列といイベントハンドラを結びつけて登録できます。 実際にキーイベントが起きたら、cbindに任せれば登録されていたイベントハンドラが実行されることになります。
実際の使用例です キーの登録は、まずcbind.NewConfiguration()をしてConfigurationを作成します。 そのConfigurationにキー文字列とハンドラをSet(&amp;quot;Alt+s&amp;quot;, handleSave)のように登録します。 または、Decodeでイベントキーに変換して、SetRuneまたはSetKeyで登録します。
実際に登録するときには、キー文字列（Alt+s等）とイベントハンドラ（func）を直接結びつけるのではなく、アクション名（文字列）を介しておくと、ヘルプや設定ファイル化するときに便利です。
アクション名とキー文字列のマップ(keyBind)とアクション名とイベントハンドラのマップ(actionHandlers)をあらかじめ定義しておいてsetKeyBindで登録しています。
const ( // アクション名 actionQuit = &amp;#34;quit&amp;#34; ) var keyBind = map[string][]string{ // アクション名に対してキー文字列をマッピング（キー文字列は複数可能） actionQuit: {&amp;#34;q&amp;#34;, &amp;#34;ctrl+q&amp;#34;}, } var actionHandlers = map[string]func(){ // アクション名に対してイベントハンドラをマッピング actionQuit: handleQuit, } // 終了のイベントハンドラ var quit = make(chan struct{}) var handleQuit = func() { close(quit) } func setKeyBind() (*cbind.</description></item></channel></rss>