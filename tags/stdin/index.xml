<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stdin on Noboru Saito&#39;s page</title>
    <link>https://noborus.github.io/tags/stdin/index.html</link>
    <description>Recent content in stdin on Noboru Saito&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://noborus.github.io/tags/stdin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>trdsql 標準入力</title>
      <link>https://noborus.github.io/trdsql/10_stdin/index.html</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/trdsql/10_stdin/index.html</guid>
      <description>標準入力 trdsqlは他のUNIXツールのように標準入力からデータを受け取ることができます。ただSQLの文法上テーブル名を指定する必要があります。標準入力を使用するときは、「-」か「stdin」を使用します。
cat test.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; apple,100 orange,50 potato,30 trdsqlは標準入力から受け取りますが、標準入力をすべて受け取り終わってからSQLの実行が開始されます。 そのため終わらないコマンドからの出力を受け取ることはできません。
CSV、LTSV、JSONを出力するコマンドでは、ファイル名の代わりに標準入力を使えばそのまま利用できます。 例えば、文字コードがUTF-8でないファイルをUTF-8に変更してそのまま使用したり、
nkf -w sjis.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; 大きなファイルを処理する前に先頭の数行のみを処理して試してみたりできます。
head -100 big.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; それ以外にも、例えばUNIX系のコマンドでは、スペースを区切りとして解釈すればテーブルデータとして扱える出力をするコマンドが数多くあります。
例えば psコマンドでは、
ps PID TTY TIME CMD 1157 pts/3 00:00:00 ps 22590 pts/3 00:00:03 zshのようにヘッダーがあり、それぞれの列を出力しています（trdsqlでは連続したスペースの区切り文字は一つとして解釈するように動作します）。
そのため、以下のように実行すると Ascii Table形式で出力できます。
ps|trdsql -ih -id &amp;#34; &amp;#34; -oat &amp;#34;SELECT \`PID\`, \`TTY\`, \`TIME\`, \`CMD\` FROM -&amp;#34; +-------+-------+----------+--------+ | PID | TTY | TIME | CMD | +-------+-------+----------+--------+ | 1363 | pts/3 | 00:00:00 | ps | | 1364 | pts/3 | 00:00:00 | trdsql | | 22590 | pts/3 | 00:00:03 | zsh | +-------+-------+----------+--------+標準入力の解析 また、trdsqlの-a解析オプションは標準入力も使用することが出来ます。</description>
    </item>
    <item>
      <title>trdsql 標準入力</title>
      <link>https://noborus.github.io/blog/10_stdin/index.html</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://noborus.github.io/blog/10_stdin/index.html</guid>
      <description>標準入力 trdsqlは他のUNIXツールのように標準入力からデータを受け取ることができます。ただSQLの文法上テーブル名を指定する必要があります。標準入力を使用するときは、「-」か「stdin」を使用します。
cat test.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; apple,100 orange,50 potato,30 trdsqlは標準入力から受け取りますが、標準入力をすべて受け取り終わってからSQLの実行が開始されます。 そのため終わらないコマンドからの出力を受け取ることはできません。
CSV、LTSV、JSONを出力するコマンドでは、ファイル名の代わりに標準入力を使えばそのまま利用できます。 例えば、文字コードがUTF-8でないファイルをUTF-8に変更してそのまま使用したり、
nkf -w sjis.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; 大きなファイルを処理する前に先頭の数行のみを処理して試してみたりできます。
head -100 big.csv|trdsql -icsv &amp;#34;SELECT * FROM -&amp;#34; それ以外にも、例えばUNIX系のコマンドでは、スペースを区切りとして解釈すればテーブルデータとして扱える出力をするコマンドが数多くあります。
例えば psコマンドでは、
ps PID TTY TIME CMD 1157 pts/3 00:00:00 ps 22590 pts/3 00:00:03 zshのようにヘッダーがあり、それぞれの列を出力しています（trdsqlでは連続したスペースの区切り文字は一つとして解釈するように動作します）。
そのため、以下のように実行すると Ascii Table形式で出力できます。
ps|trdsql -ih -id &amp;#34; &amp;#34; -oat &amp;#34;SELECT \`PID\`, \`TTY\`, \`TIME\`, \`CMD\` FROM -&amp;#34; +-------+-------+----------+--------+ | PID | TTY | TIME | CMD | +-------+-------+----------+--------+ | 1363 | pts/3 | 00:00:00 | ps | | 1364 | pts/3 | 00:00:00 | trdsql | | 22590 | pts/3 | 00:00:03 | zsh | +-------+-------+----------+--------+標準入力の解析 また、trdsqlの-a解析オプションは標準入力も使用することが出来ます。</description>
    </item>
  </channel>
</rss>