<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>trdsql on Noboru Saito&#39;s page</title><link>https://noborus.github.io/categories/trdsql/</link><description>Recent content in trdsql on Noboru Saito&#39;s page</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy;Noboru Saito 2019</copyright><lastBuildDate>Sat, 14 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://noborus.github.io/categories/trdsql/index.xml" rel="self" type="application/rss+xml"/><item><title>trdsql SQLite3エンジンの使用</title><link>https://noborus.github.io/blog/14_sqlite3/</link><pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/14_sqlite3/</guid><description>SQLite3への接続方法を説明します。 SQLite3に接続 そもそもtrdsqlのデフォルトはSQLite3のメモリデータベースに接続していますが、メモリデータベース以外にも接続できます。 オプションの -driver に sqlite3 を指定し、-dsn にサーバーへの接続情報を指定します。 dsnはsqlite</description></item><item><title>trdsql MySQLエンジンの使用</title><link>https://noborus.github.io/blog/13_mysql/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/13_mysql/</guid><description>前回はPostgreSQL接続の話でしたが、今度はMySQLに接続して使用する方法を説明します。 MySQLに接続 MySQLに接続するには動作しているMySQLサーバーが必要です。接続できテーブルが作成できる権限があるデータベースを作成しておきます。 オプションの -driver に mysql を指定し、-d</description></item><item><title>trdsql PostgreSQLエンジンの使用</title><link>https://noborus.github.io/blog/12_postgres/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/12_postgres/</guid><description>これまでSQLは使用していましたが、データベースについてはそれほど言及してきませんでした。 trdsqlは組込みのSQLite3を利用してSQLを実行していますが、データベースの処理を別のデータベースに変更出来ます。 ここではPostgreSQLを使用する方法を説明します。 Postg</description></item><item><title>trdsql 処理の概要</title><link>https://noborus.github.io/blog/11_summary/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/11_summary/</guid><description>ここでtrdsqlの内部処理の概要を簡単に説明します。 trdsqlの内部処理は、以下のようになっています。 オプションやSQLコマンドの解釈 SQLコマンド内のファイル名をインポート SQLの実行 指定された出力フォーマットでエクスポート SQLの実行は実際のRDBMSを使用して実行されま</description></item><item><title>trdsql 標準入力</title><link>https://noborus.github.io/blog/10_stdin/</link><pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/10_stdin/</guid><description>trdsqlは他のUNIXツールのように標準入力からデータを受け取ることができます。ただSQLの文法上テーブル名となるものを指定する必要があります。標準入力をしようするときは、「-」か「stdin」を使用します。 （上記の名前は他のツールでも混乱を起こすので、本当のファイルの名前と</description></item><item><title>trdsql ワイルドカード、圧縮ファイル</title><link>https://noborus.github.io/blog/09_wildcard/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/09_wildcard/</guid><description>ここまでは一つのファイルを対象としてきましたが、ログファイル等はローテートされて複数のファイルになっている場合があります。 同じ列で構成されている対象ファイルであれば、ワイルドカードを使用して、一つのテーブルとして扱うことができます。 ls test*.csv test1.csv test2.csv test3.csvtrdsql -icsv &amp;#34;SELECT COUNT(*) FROM test*.csv&amp;#34; 15 また古いログファイルは圧縮</description></item><item><title>trdsql Log集計</title><link>https://noborus.github.io/blog/08_log/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/08_log/</guid><description>ApacheやnginxなどのLogをLTSVフォーマットで出力する方法も定着してきました。 そのようなLogをtrdsqlで解析する例です。 出力する側は、apacheのLogFormatの設定を以下のようにカスタマイズフォーマットにします。 LogFormat &amp;quot;host:%h\tident:%l\tuser:%u\ttime:%t\treq:%r\tstatus:%&amp;gt;s\tsize:%b\treferer:\%{Referer}i\tua:%{User-Agent}i&amp;quot; combined_ltsv host,ident,user,t</description></item><item><title>trdsql GROUP集計</title><link>https://noborus.github.io/blog/07_group/</link><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/07_group/</guid><description>全体の合計を計算することもありますが、グループ毎の合計をまとめて出力したい場合もあります。 そこで使うのがGROUP BYです。 前回の例をもう一度使用します。 name,price apple,100 orange,50 melon,500 apple,90 apple,90 orange,40 orange,40 ここでappleやorange毎の合計を出したい場合は、以下のように検索条件で絞れば計算できますが、nameの</description></item><item><title>trdsql 集計計算</title><link>https://noborus.github.io/blog/06_calculation/</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/06_calculation/</guid><description>集計には、COUNT()だけでなく集計計算することも当然できます。SQLには数値に対して計算をおこなう集計関数があらかじめ揃っています。 ここでは以下のようなCSVファイルを例に説明します。 name,price apple,100 orange,50 melon,500 apple,90 apple,90 orange,40 orange,40 SUM 合計を計算します。price列をすべて足します。 trdsql -ih &amp;#34;SELECT SUM(price) FROM sample.csv&amp;#34; 910 前にも書いた</description></item><item><title>trdsql 集計</title><link>https://noborus.github.io/blog/05_aggregate/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/05_aggregate/</guid><description>最初はCOUNT(*)です。全体の件数を数えることが出来ます。 集計関数を使用すると元の行と列のデータは出力されず、そこから集計された結果が出力されます。 以下の例は結果が１行なので、CSVの様に見えませんが、1行1列(ヘッダー付き)のCSVとして出力されています。 単純に件数を数得る</description></item><item><title>trdsql 簡単なSQL その２</title><link>https://noborus.github.io/blog/04_sql2/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/04_sql2/</guid><description>前回、列の並べ替え、抽出、行の並べ替えをしたので、今回は行の抽出です。 行を抽出するには、WHEREを付けて、検索条件を書きます。 前回と同じ例のファイルを使います。 trdsql -ih &amp;#34;SELECT id, \`name\` FROM header.csv WHERE id=1&amp;#34; 1,Orange SQLのメインな機能ですね。検索条件を書くだけで、該当する行を出力できます。 AND や OR （）を使用するこ</description></item><item><title>trdsql 簡単なSQL</title><link>https://noborus.github.io/blog/03_sql/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/03_sql/</guid><description>trdsqlと簡単なSQLを使用することで、他のUNIXツールを組み合わせて出来るようなことが一発で出来るようになります。 SELECT * FROMから進んで簡単なSQLを実行する場合、あらかじめ列名を調べておく必要があります。trdsql に -aとファイル名を付けて実行するとファイルを解析して</description></item><item><title>trdsql ファイルフォーマット変換</title><link>https://noborus.github.io/blog/02_convert/</link><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/02_convert/</guid><description>trdsqlはCSV等のファイルをSQLで処理するツールとして説明していますが、単純にファイル形式を変換するツールとしても使用できます。 その場合、SQLは以下の定型句さえ覚えておけば、十分です。 SELECT * FROM ファイル名 後は入力形式(-i&amp;hellip;)と出力形式(-o&amp;hellip;)</description></item><item><title>trdsql インストール</title><link>https://noborus.github.io/blog/01_install/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/01_install/</guid><description>概要 trdsqlはテーブル（表）形式のテキストに対してSQLを実行するCLIツールです。 テーブル形式とは、行と列で構成される以下のようなデータです。 1列 2列 1行 a1 a2 2行 b1 b2 インストール Linux/Windows/macOSの場合は、GitHubのリリースページからバイナリをダウン</description></item><item><title>trdsql 目次</title><link>https://noborus.github.io/blog/00_index/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/blog/00_index/</guid><description>インストール 変換 簡単なSQL 簡単なSQLその2 集計 集計計算 グループ集計 ログ集計 ワイルドカード、圧縮ファイル 標準入力 処理の概要 PostgreSQLエンジンの使用 MySQLエンジンの使用 SQLite3エンジンの使用</description></item></channel></rss>