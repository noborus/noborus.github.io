<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ov - 機能豊富なページャー on 斉藤登のページ</title><link>https://noborus.github.io/ja/ov/index.html</link><description>Recent content in ov - 機能豊富なページャー on 斉藤登のページ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 08 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://noborus.github.io/ja/ov/index.xml" rel="self" type="application/rss+xml"/><item><title>psql</title><link>https://noborus.github.io/ja/ov/psql/index.html</link><pubDate>Fri, 21 Jul 2023 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/psql/index.html</guid><description>PostgreSQLのクライアントツールであるpsqlは結果を表示するときにPAGERを利用できます。 PSQLのPAGERを設定するも参照してください。
psql psqlは、結果を表示するときに最初の行にヘッダーとして列名が表示され、その下に列が|で区切られて表示されます。 ovを利用すると、ヘッダーと列を指定することで、より見やすく表示できます。
以下はPSQL_PAGER の推奨設定例です。 ヘッダー1を指定(-H1)、列の区切りに&amp;quot;|&amp;ldquo;を指定(-d &amp;quot;|&amp;quot;)、カラムモード(-C)を設定します。 画面に収まる場合は、ページャーを終了します(-F)。 列の色を変える(--column-rainbow)のもおすすめです。
PSQL_PAGER &amp;#39;ov -F -C -d &amp;#34;|&amp;#34; -H1 --column-rainbow&amp;#39; 画面ではデフォルトから色を変えてconfig.yamlで以下の設定をしています。
StyleHeader: Background: &amp;#34;#23274f&amp;#34; Bold: true StyleColumnHighlight: Foreground: &amp;#34;lightcyan&amp;#34; Reverse: true StyleAlternate: Background: &amp;#34;#2a2a2a&amp;#34; watch(PostgreSQL 15) PostgreSQL 15からはwatchが利用できます。 PSQL_WATCH_PAGER には以下の設定を推奨します。 これにより空行で区切られた最後のセクションを表示し続けます。
PSQL_WATCH_PAGER=&amp;#39;ov --follow-section --section-delimiter &amp;#34;^$&amp;#34;&amp;#39; expanded output (\x) 拡張出力(\x)で表示のときには、レコード区切りをセクション区切りとして扱うと、レコード区切りでスクロールするため、見やすくなります。
PAGER &amp;#39;ov -F --section-delimiter &amp;#34;^-&amp;#34;&amp;#39; (\x)と\watchを組み合わせることもできます。
unaligned (\a) アラインメントなし（列を揃えない）表示でも、列ハイライトを利用することで、快適に表示されます。 以下のように、PAGERの指定は変更しません。
PSQL_PAGER=&amp;#39;ov -F -C -d &amp;#34;|&amp;#34; -H1&amp;#39;.</description></item><item><title>git</title><link>https://noborus.github.io/ja/ov/git/index.html</link><pubDate>Sun, 24 Sep 2023 10:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/git/index.html</guid><description>ovでgitのlogを見やすくする gitのlogを見やすくする工夫はいろんなところで紹介されていますが、gitの設定等により表示を変更する方法にとどまります。 gitの出力をセクション区切りで分割することで、より使いやすくなります。 また、それに合わせてjump-targetを&amp;quot;section&amp;quot;しておくことをおすすめします。 以下はgitの推奨設定例です。
[pager] diff = ov -F --section-delimiter &amp;#34;^diff&amp;#34; --section-header&amp;#34; log = ov -F --section-delimiter &amp;#34;^commit&amp;#34; --jump-target &amp;#34;section&amp;#34; （--jump-target &amp;quot;section&amp;quot;はお好みで追加してください）
git log git logはcommit毎に区切られます。 上記の設定によりcommit毎に移動できます。
git diff git diffはdiffまたはファイル毎に区切られます。 上記の設定によりdiff毎に移動できます。
さらに --section-headerを指定することで、diffのファイル名を表示し続けられます。
検索 上記の設定により検索したときの移動がコミット単位で表示するようになります。 通常は検索結果が一番上に表示するため、途中の行であった場合はさかのぼる必要がありますが、コミットの先頭から表示されます。</description></item><item><title>delta</title><link>https://noborus.github.io/ja/ov/delta/index.html</link><pubDate>Tue, 27 Sep 2022 18:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/delta/index.html</guid><description>deltaはpagerをサポートしています。
deltaはgitのpagerとしてよく指定されますが、pagerは実際にはdelta内部から呼び出されます。
したがって、deltaの設定はgitconfigに書いて指定することが多いです。 以下はgitconfigの設定例です。
[core] pager = delta [delta] navigate = true side-by-side = true file-style = yellow [delta]のnavigate = true はlessを使用するときにn/Nで移動できるようにするための設定ですが、 この設定により必要な場所をマークが付きます。
ovではこのマークを使用して環境変数DELTA_PAGERをセットします。
export DELTA_PAGER=&amp;#34;ov --section-delimiter &amp;#39;^(commit|added:|removed:|renamed:|Δ)&amp;#39; --section-header --pattern &amp;#39;•&amp;#39;&amp;#34; これらの設定を組み合わせることで、ファイル毎にファイル(space key of ^ key)、diff毎にn/N keyで移動できます。 さらに、行を移動しても差分ファイル名が表示されます。</description></item><item><title>mysql</title><link>https://noborus.github.io/ja/ov/mysql/index.html</link><pubDate>Fri, 30 Jun 2023 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/mysql/index.html</guid><description>ov はmysqlクライアントやMySQL Shellのページャーとしても使用できます。 mysqlクライアントは--pagerオプションで指定できます。
mysql --pager=&amp;#39;ov -w=f -H3 -F -C -d &amp;#34;|&amp;#34;&amp;#39; ~/.my.cnf設定ファイルに以下を書くことでも使用できます。
[client] pager=ov -w=f -H3 -F -C -d &amp;#34;|&amp;#34; mysqlのヘッダーは3行なので、-H3で指定していますが、うち2行は区切りの線です。 もし区切りの線を常に表示しておかなくてもよいのであれば、-H1を指定して、さらに--skip-lines 1で1行目をスキップするようにします。
ov -w=f --skip-lines 1 -H1 -F -C -d &amp;#34;|&amp;#34;&amp;#39; mysqlshでは、--pagerオプションを使うか、mysqlshが起動している間に設定します。 例えば、jsモードでは、以下のコマンドで永続的に設定できます。
shell.options.setPersist(&amp;#34;pager&amp;#34;,&amp;#34;ov -H1 --skip-lines 1 -C -w=false -d&amp;#39;|&amp;#39; -F&amp;#34;) 日本語：SQLモードとPythonモードでは、以下のように設定します。
```console \option --persist pager &amp;#34;ov -w=f -H1 --skip-lines 1 -F -C -d &amp;#39;|&amp;#39;&amp;#34;</description></item><item><title>pgcli</title><link>https://noborus.github.io/ja/ov/pgcli/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/pgcli/index.html</guid><description>ovはpgcliのページャーとしても使用可能です。
~/.config/pgcli/config に以下のように設定します。
pager = &amp;#39;ov -C -d &amp;#34;|&amp;#34; --skip-lines 1 -H1&amp;#39;</description></item><item><title>mycli</title><link>https://noborus.github.io/ja/ov/mycli/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/mycli/index.html</guid><description>ovはmycliのページャーとしても使用できます。
mycliはmysqlの~/.my.cnfファイルを使用して設定できます。 https://www.mycli.net/configを参照してください。
[client] pager=&amp;#34;ov -C --skip-lines 1 --header 1 -d&amp;#39;|&amp;#39;&amp;#34;</description></item><item><title>ps</title><link>https://noborus.github.io/ja/ov/ps/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/ps/index.html</guid><description>psの出力を列区切りで表示できます。 --column-widthを使用するとスペース区切りよりも賢く列を認識できます。
ps aux | ov --column-width --column-rainbow -H1</description></item><item><title>man</title><link>https://noborus.github.io/ja/ov/man/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/man/index.html</guid><description>ovはmanページを表示するページャーとしても使えます。 環境変数MANPAGERにovを設定してください。
MANPAGER=ov manページでカラフルに表示したいときはStyleOverStrikeとStyleOverLineスタイルによりカスタマイズできます。
StyleOverStrike: Foreground: &amp;#34;aqua&amp;#34; Bold: true StyleOverLine: Foreground: &amp;#34;red&amp;#34; Underline: true</description></item><item><title>procs</title><link>https://noborus.github.io/ja/ov/procs/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/procs/index.html</guid><description>procs のページャーとしても使用可能です。
configuration file に以下のように設定します。 ヘッダー行を1または2で設定すると便利です。
[pager] command = &amp;#34;ov -H=1 -w=false -d=│&amp;#34;</description></item><item><title>top</title><link>https://noborus.github.io/ja/ov/top/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/top/index.html</guid><description>top works fine when started in batch mode (it doesn&amp;rsquo;t work as-is when started normally because it steals keystrokes). topコマンドは自前で画面に合わせて描画するためページャーは必要ありませんが(通常起動するとキーストロークを奪ってしまうためそのままでは動作しません)、 現在の状態を表示するだけで、履歴を表示することはできません。 バッチモードで起動すると表示を繰り返すため、それをページャーで受け取って表示すれば履歴を表示できます。
topを-bバッチモードで起動すると先頭が&amp;quot;top&amp;quot;から始まる出力で繰り返し出力されます。その出力をovで受け取り、--follow-sectionで繰り返し表示します。 そうするとfollow section modeが動作しているときには、最新が表示され、とめればさかのぼって履歴を表示できます。
top -b -c -w512|ov --column-delimiter &amp;#34;/\s+/&amp;#34; --section-delimiter &amp;#34;^top&amp;#34; --column-mode --column-rainbow --follow-section -w=false</description></item><item><title>ovでファイル監視（ウォッチ）</title><link>https://noborus.github.io/ja/ov/watch/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/watch/index.html</guid><description>ovはウォッチモードをサポートしています。ウォッチモードは一定間隔でファイルを読み込みます。 ファイルは指定した時間ごとに追加されます。
ov --watch 1 /proc/meminfo 日本語：その時、EOFの代わりにformfeed(\f)を追加します。 ウォッチモードは自動的にfollow-section &amp;ldquo;\f&amp;quot;を設定します。</description></item><item><title>bat</title><link>https://noborus.github.io/ja/ov/bat/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/bat/index.html</guid><description>bat のページャーとしてもサポートしています。
環境変数PAGERまたはBAT_PAGERにovを設定してください。
export BAT_PAGER=&amp;#34;ov -F -H3&amp;#34; bat を使用するときには折り返さない(--wrap=never)で使用することをおすすめします。 batで折り返してしまうと、折り返さない表示に切り替えることができません。 ovの方で折り返しを行ったほうが、ovの機能を活用できます。
bat --wrap=never README.md</description></item><item><title>csvの表示</title><link>https://noborus.github.io/ja/ov/csv/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/csv/index.html</guid><description>ovをCSVビューアとして使うことができます。 ヘッダーの有無や区切りも文字を指定できます。
ov -H1 -C -d&amp;#39;,&amp;#39; -c --column-rainbow MOCK_DATA.csv</description></item><item><title>markdown表示</title><link>https://noborus.github.io/ja/ov/markdown/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/markdown/index.html</guid><description>ovはmarkdownビューアとしても使えます。 セクション区切りとしてmarkdownのヘッダを指定することで、次のセクションに移動しやすくなります。
ov --section-delimiter &amp;#34;^#&amp;#34; README.md</description></item><item><title>複数ファイル</title><link>https://noborus.github.io/ja/ov/multifile/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/multifile/index.html</guid><description>ovは複数ファイルを指定可能です。
] キーで次のドキュメントを表示します。 [ キーで前のドキュメントを表示します。 (デフォルトキー設定)
ov *.go</description></item><item><title>複数の単語を複数の色でハイライト</title><link>https://noborus.github.io/ja/ov/multicolor/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/multicolor/index.html</guid><description>ovは複数の単語を複数の色でハイライトできます。
ov --multi-color &amp;#34;ERROR.*,WARN,INFO,DEBUG,not,^.{24}&amp;#34; access.log 入力方法 正規表現をスペースで区切って入力します。 スペースを含む場合は、引用符で囲みます。
.（デフォルトキー） でmulticolorの入力モードになります。 ERROR.* WARN &amp;#34;error is&amp;#34; カスタマイズ 色（スタイル）はカスタマイズ可能です。 github customizeを参照してください。
StyleMultiColorHighlight: - Foreground: &amp;#34;red&amp;#34; - Foreground: &amp;#34;aqua&amp;#34; - Foreground: &amp;#34;yellow&amp;#34; - Foreground: &amp;#34;fuchsia&amp;#34; - Foreground: &amp;#34;lime&amp;#34; - Foreground: &amp;#34;blue&amp;#34; - Foreground: &amp;#34;grey&amp;#34;</description></item><item><title>大きなファイルを開く速度</title><link>https://noborus.github.io/ja/ov/speed/index.html</link><pubDate>Thu, 10 Aug 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/speed/index.html</guid><description>多くのページャーはファイルを全部読み込む前に表示を開始するため、単純な速度比較は難しいですが、最後尾に移動したり行数が必要な処理（行番号の表示等）をする場合は、ファイル全体を読む必要があり速度に差が出ます。
ovは、大きなファイルを読み込むときには、ファイルの先頭以外は行数と位置を記録して後で読み直せるようにするため、メモリ使用量を抑えて、速度も速く動作します。 また、ファイル操作は別のゴルーチンがおこなうため、ファイルの読み込みが発生しても操作がブロックされることはありません。
そのため、大きなファイルを開いても操作によって待たされることが無いようになっています。
lessと比較してみます。
ovは、大きなファイルではメモリに読み込まずにカウントと記録だけおこなうため、全行数のカウントが早く終わります。行数が把握できるとそこからすぐに最後尾に移動できるため操作が止まることはありません。
また、全行数を読み込む前であってもlessのように最後尾に移動する場合は、先に最後尾に移動してからカウントを再開するため、最後尾に移動するのも即座に可能です。</description></item><item><title>コマンド実行</title><link>https://noborus.github.io/ja/ov/exec/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/exec/index.html</guid><description>通常ページャーは実行した出力をパイプでovに渡しますが、stdoutとstderrをどちらか、または両方を混在させて表示することになります。
make |ov make 2&amp;gt;&amp;amp;1 |ov Execモードはovからコマンドを実行します。 ovから実行することで、stdoutとstderrを別々のドキュメントとして表示できます。
さらに--follow-allと同時に使うことで、最後に出力された方を表示できます。
つまり、makeの標準出力とエラー出力を別々に表示しながら、エラーがあれば画面を切り替えできます。
ov --follow-all --exec -- make</description></item><item><title>フォローモードの使い方</title><link>https://noborus.github.io/ja/ov/tail/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/tail/index.html</guid><description>出力されたデータを追加して、最下行に移動します（tail -fのように）。
ovはfollowモードで入力検索などの操作が可能です（インクリメンタルサーチも！）。
docker run chentex/random-logger:latest 100 400 |ov --follow-mode</description></item><item><title>セクションの使い方</title><link>https://noborus.github.io/ja/ov/section/index.html</link><pubDate>Fri, 21 Jul 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/section/index.html</guid><description>ovは複数行のブロックをセクションとして表示できます。 セクションのブロックはセクション区切り行で区切られます。 セクション区切り行はStyleSectionLineのスタイル(背景色緑)で表示されます。
The section delimiter is optionally specified as a regular expression string at startup. セクション区切りは、起動時に正規表現文字列としてオプションで指定できます。
ov --section-delimiter &amp;#34;^$&amp;#34; 起動後は、セクション区切りを入力モードで入力することで設定できます。 セクション区切りの入力モードは、section_delimiterのキーバインディング(alt + d)で入力できます。
Section delimiter: ^$ セクション区切りが不要な場合(空行など)は、--section-start 1を使うことで次の行から表示できます。
--follow-sectionは、フォローモードの行の代わりにセクションを使用します。
\watch of psqlとの併用に適しています。</description></item><item><title>メモリ管理</title><link>https://noborus.github.io/ja/ov/memory/index.html</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://noborus.github.io/ja/ov/memory/index.html</guid><description>メモリ管理 通常ファイル ov は ChunkSize（10,000行）毎にChunkに分けて管理しています。 例えば、73,210行のファイルは以下の図のように7つのChunkに分割されます。
最初の Chunk (Chunk0) は常にメモリにロードされたままになります。 Chunk3 と Chunk4 もメモリにロードされます。表示時に2つの Chunk にまたがる可能性があるためです。 Chunk1 と Chunk2 は以前に使用されていてメモリにロードされていますが、制限を超えると解放されます。 通常のファイルの場合、シークしながらメモリをロードして解放することで、メモリと速度を節約することができます。
通常ファイル以外 seek できないファイル（パイプや圧縮ファイル）も Chunk 単位で管理していますが、一度解放するとメモリにロードすることはできないため、できるだけメモリにロードします。 メモリ制限がある場合は、メモリ制限まで読み込んでから読み込みを一時停止します。
例えば、41230行に移動すると、Chunk1、Chunk2、Chunk3が解放され、現在の位置から先読みされます。
メモリ制限 通常ファイルのデフォルトのメモリ制限は100（100万行）です。 あまり変更する必要はないと思いますが、--memory-limit-file で指定することができます。
ov --memory-limit-file 10 large.log 通常ファイル以外のメモリ制限のデフォルトは-1（無制限）です。
メモリ不足を避けるためにメモリに応じて制限したほうがよいでしょう。 ov.yaml に MemoryLimit: 10000(or 1000) のように設定することをお勧めします。
MemoryLimit: 10000 コマンドラインオプションでも --memory-limit 1000 のように指定できます。
command | ov --memory-limit 1000 メモリ制限オプションを指定しても、大きなファイルはメモリを多く使用します。 GCを頻繁に実行するために GOMEMLIMIT を設定すると、一時的なメモリの増加も抑制されます。
export GOMEMLIMIT=400MiB ov --memory-limit-file 10 large.log</description></item></channel></rss>