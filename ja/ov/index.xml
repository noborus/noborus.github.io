<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ov - Feature-rich pager on 斉藤登のページ</title><link>https://noborus.github.io/ja/ov/index.html</link><description>Recent content in ov - Feature-rich pager on 斉藤登のページ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 08 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://noborus.github.io/ja/ov/index.xml" rel="self" type="application/rss+xml"/><item><title>psql</title><link>https://noborus.github.io/ja/ov/psql/index.html</link><pubDate>Fri, 30 Jun 2023 04:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/psql/index.html</guid><description>psql 以下はPSQL_PAGER の推奨設定です。 ヘッダー1を指定(-H1)、列の区切りに&amp;quot;|&amp;ldquo;を指定(-d &amp;ldquo;|&amp;quot;)、カラムモード(-C)を設定します。 画面に収まる場合は、ページャーを終了します(-F)。
PSQL_PAGER &amp;#39;ov -F -C -d &amp;#34;|&amp;#34; -H1&amp;#39; --column-rainbow config.yamlで以下の設定をしています。
StyleHeader: Background: &amp;#34;#23274f&amp;#34; Bold: true StyleColumnHighlight: Foreground: &amp;#34;lightcyan&amp;#34; Reverse: true StyleAlternate: Background: &amp;#34;#2a2a2a&amp;#34; watch(PostgreSQL 15) PostgreSQL 15からはwatchが利用できます。 PSQL_WATCH_PAGER には以下の設定を推奨します。 これにより空行で区切られた最後のセクションを表示し続けます。
PSQL_WATCH_PAGER=&amp;#39;ov --follow-section --section-delimiter &amp;#34;^$&amp;#34;&amp;#39; expanded output (\x) 拡張出力(\x)で表示のときには、レコード区切りをセクション区切りとして扱うと、レコード区切りでスクロールするため、見やすくなります。
PAGER &amp;#39;ov -F --section-delimiter &amp;#34;^-&amp;#34;&amp;#39; (\x)と\watchを組み合わせることもできます。
unaligned (\a) アラインメントなし（列を揃えない）表示でも、列ハイライトを利用することで、快適に表示されます。 以下のように、PAGERの指定は変更しません。
PSQL_PAGER=&amp;#39;ov -F -C -d &amp;#34;|&amp;#34; -H1&amp;#39;.</description></item><item><title>git</title><link>https://noborus.github.io/ja/ov/git/index.html</link><pubDate>Tue, 13 Jun 2023 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/git/index.html</guid><description>ovでgitのlogを見やすくする gitのlogを見やすくする工夫はいろんなところで紹介されていますが、gitの設定等により表示を変更する方法にとどまります。 gitの出力をセクション区切りで分割することで、より使いやすくなります。 以下はgitの推奨設定例です。
[pager] diff = ov -F --section-delimiter &amp;#34;^diff&amp;#34; log = ov -F --section-delimiter &amp;#34;^commit&amp;#34; git log git logはcommit毎に区切られます。 以下のようにするとcommit毎に移動できます。
[pager] log = ov -F --section-delimiter &amp;#34;^commit&amp;#34; git diff git diffはdiffまたはファイル毎に区切られます。 以下のようにするとdiff毎に移動できます。
[pager] diff = ov -F --section-delimiter &amp;#34;^diff&amp;#34;</description></item><item><title>mysql</title><link>https://noborus.github.io/ja/ov/mysql/index.html</link><pubDate>Fri, 30 Jun 2023 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/mysql/index.html</guid><description>ov はmysqlクライアントやMySQL Shellのページャーとしても使用できます。 mysqlクライアントは--pagerオプションで指定できます。
mysql --pager=&amp;#39;ov -w=f -H3 -F -C -d &amp;#34;|&amp;#34;&amp;#39; ~/.my.cnf設定ファイルに以下を書くことでも使用できます。
[client] pager=ov -w=f -H3 -F -C -d &amp;#34;|&amp;#34; mysqlのヘッダーは3行なので、-H3で指定していますが、うち2行は区切りの線です。 もし区切りの線を常に表示しておかなくてもよいのであれば、-H1を指定して、さらに--skip-lines 1で1行目をスキップするようにします。
ov -w=f --skip-lines 1 -H1 -F -C -d &amp;#34;|&amp;#34;&amp;#39; mysqlshでは、--pagerオプションを使うか、mysqlshが起動している間に設定します。 例えば、jsモードでは、以下のコマンドで永続的に設定できます。
shell.options.setPersist(&amp;#34;pager&amp;#34;,&amp;#34;ov -H1 --skip-lines 1 -C -w=false -d&amp;#39;|&amp;#39; -F&amp;#34;) 日本語：SQLモードとPythonモードでは、以下のように設定します。
```console \option --persist pager &amp;#34;ov -w=f -H1 --skip-lines 1 -F -C -d &amp;#39;|&amp;#39;&amp;#34;</description></item><item><title>pgcli</title><link>https://noborus.github.io/ja/ov/pgcli/index.html</link><pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/pgcli/index.html</guid><description>ov can be set as a pager for pgcli.
~/.config/pgcli/config
pager = &amp;#39;ov -C -d &amp;#34;|&amp;#34; --skip-lines 1 -H1&amp;#39;</description></item><item><title>mycli</title><link>https://noborus.github.io/ja/ov/mycli/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/mycli/index.html</guid><description>ovはmycliのページャーとしても使用できます。
mycliはmysqlの~/.my.cnfファイルを使用して設定できます。 https://www.mycli.net/configを参照してください。
[client] pager=&amp;#34;ov -C --skip-lines 1 --header 1 -d&amp;#39;|&amp;#39;&amp;#34;</description></item><item><title>ps</title><link>https://noborus.github.io/ja/ov/ps/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/ps/index.html</guid><description>psの出力を列区切りで表示できます。 --column-widthを使用するとスペース区切りよりも賢く列を認識できます。
ps aux | ov --column-width --column-rainbow -H1</description></item><item><title>man</title><link>https://noborus.github.io/ja/ov/man/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/man/index.html</guid><description>ovはmanページを表示するページャーとしても使えます。 環境変数MANPAGERにovを設定してください。
MANPAGER=ov manページでカラフルに表示したいときはStyleOverStrikeとStyleOverLineスタイルによりカスタマイズできます。
StyleOverStrike: Foreground: &amp;#34;aqua&amp;#34; Bold: true StyleOverLine: Foreground: &amp;#34;red&amp;#34; Underline: true</description></item><item><title>top</title><link>https://noborus.github.io/ja/ov/top/index.html</link><pubDate>Sat, 08 Jul 2023 15:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/top/index.html</guid><description>top works fine when started in batch mode (it doesn&amp;rsquo;t work as-is when started normally because it steals keystrokes). topコマンドは自前で画面に合わせて描画するためページャーは必要ありませんが(通常起動するとキーストロークを奪ってしまうためそのままでは動作しません)、 現在の状態を表示するだけで、履歴を表示することはできません。 バッチモードで起動すると表示を繰り返すため、それをページャーで受け取って表示すれば履歴を表示できます。
topを-bバッチモードで起動すると先頭が&amp;quot;top&amp;quot;から始まる出力で繰り返し出力されます。その出力をovで受け取り、--follow-sectionで繰り返し表示します。 そうするとfollow section modeが動作しているときには、最新が表示され、とめればさかのぼって履歴を表示できます。
top -b -c -w512|ov --column-delimiter &amp;#34;/\s+/&amp;#34; --section-delimiter &amp;#34;^top&amp;#34; --column-mode --column-rainbow --follow-section -w=false</description></item><item><title>procs</title><link>https://noborus.github.io/ja/ov/procs/index.html</link><pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/procs/index.html</guid><description>procs supports pager.
You can specify the pager in the configuration file.
It is convenient to set header(-H) to 1 or 2.
[pager] command = &amp;#34;ov -H=1 -w=false -d=│&amp;#34;</description></item><item><title>bat</title><link>https://noborus.github.io/ja/ov/bat/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/bat/index.html</guid><description>bat のページャーとしてもサポートしています。
環境変数PAGERまたはBAT_PAGERにovを設定してください。
export BAT_PAGER=&amp;#34;ov -F -H3&amp;#34; bat を使用するときには折り返さない(--wrap=never)で使用することをおすすめします。 batで折り返してしまうと、折り返さない表示に切り替えることができません。 ovの方で折り返しを行ったほうが、ovの機能を活用できます。
bat --wrap=never README.md</description></item><item><title>Watch files with ov</title><link>https://noborus.github.io/ja/ov/watch/index.html</link><pubDate>Sun, 22 May 2022 18:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/watch/index.html</guid><description>ov supports watch mode, which reads files at regular intervals. The file is added every specified time.
ov --watch 1 /proc/meminfo At that time, add formfeed (\f) instead of EOF. watch mode automatically sets follow-section &amp;ldquo;\f&amp;rdquo;.</description></item><item><title>view csv</title><link>https://noborus.github.io/ja/ov/csv/index.html</link><pubDate>Fri, 30 Jun 2023 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/csv/index.html</guid><description>ovをCSV Viewerとして使うことができます。 ヘッダーの有無や区切りも文字を指定できます。
ov -H1 -C -d&amp;#39;,&amp;#39; -c --column-rainbow MOCK_DATA.csv</description></item><item><title>View markdown</title><link>https://noborus.github.io/ja/ov/markdown/index.html</link><pubDate>Tue, 24 May 2022 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/markdown/index.html</guid><description>ov can also be used as a markdown viewer. Specifying the markdown header as a section delimiter makes it easier to move to the next section.
ov --section-delimiter &amp;#34;^#&amp;#34; README.md</description></item><item><title>multiple files</title><link>https://noborus.github.io/ja/ov/multifile/index.html</link><pubDate>Sun, 26 Jun 2022 09:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/multifile/index.html</guid><description>ov can specify multiple files.
] key to view the next document [ key to view previous document (With default key bindings).
ov *.go</description></item><item><title>Multicolor highlights multiple words</title><link>https://noborus.github.io/ja/ov/multicolor/index.html</link><pubDate>Fri, 30 Dec 2022 06:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/multicolor/index.html</guid><description>ov can highlight multiple words in multiple colors.
ov --multi-color &amp;#34;ERROR.*,WARN,INFO,DEBUG,not,^.{24}&amp;#34; access.log input mode Enter regular expressions separated by spaces. Enclose in quotation marks if it contains spaces.
. multicolor input mode(default key bindings). ERROR.* WARN &amp;#34;error is&amp;#34; customize The colors(styles) displayed are customizable. See github size for settings.
StyleMultiColorHighlight: - Foreground: &amp;#34;red&amp;#34; - Foreground: &amp;#34;aqua&amp;#34; - Foreground: &amp;#34;yellow&amp;#34; - Foreground: &amp;#34;fuchsia&amp;#34; - Foreground: &amp;#34;lime&amp;#34; - Foreground: &amp;#34;blue&amp;#34; - Foreground: &amp;#34;grey&amp;#34;</description></item><item><title>execute command</title><link>https://noborus.github.io/ja/ov/exec/index.html</link><pubDate>Fri, 27 May 2022 08:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/exec/index.html</guid><description>Exec mode executes commands from ov. In Exec mode, stdout and stderr can be displayed as separate documents.
By using it at the same time as --follow-all, you can display the one that was output last.
For example, while displaying the standard output of make and the error output separately, you can switch the screen if there is an error.
ov --follow-all --exec -- make</description></item><item><title>How to use follow mode</title><link>https://noborus.github.io/ja/ov/tail/index.html</link><pubDate>Fri, 27 May 2022 08:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/tail/index.html</guid><description>Output appended data and move it to the bottom line (like tail -f).
ov can perform operations such as search input without stopping follow-mode (also incremental search!).
docker run chentex/random-logger:latest 100 400 |ov --follow-mode</description></item><item><title>How to use section</title><link>https://noborus.github.io/ja/ov/section/index.html</link><pubDate>Thu, 26 May 2022 08:00:00 +0900</pubDate><guid>https://noborus.github.io/ja/ov/section/index.html</guid><description>ov can use a unit called section. Sections are blocks separated by section delimiters. The section delimiter line is displayed in the style of StyleSectionLine (background color green).
The section delimiter is optionally specified as a regular expression string at startup.
ov --section-delimiter &amp;#34;^$&amp;#34; If you want to set the section delimiter after startup, enter it in input mode with the section_delimiter key binding (alt + d).
Section delimiter: ^$ If section delimiters are not required (blank lines, etc.</description></item><item><title>Memory management</title><link>https://noborus.github.io/ja/ov/memory/index.html</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://noborus.github.io/ja/ov/memory/index.html</guid><description>メモリ管理 通常ファイル ov は ChunkSize（10,000行）毎にChunkに分けて管理しています。 例えば、73,210行のファイルは以下の図のように7つのChunkに分割されます。
最初の Chunk (Chunk0) は常にメモリにロードされたままになります。 Chunk3 と Chunk4 もメモリにロードされます。表示時に2つの Chunk にまたがる可能性があるためです。 Chunk1 と Chunk2 は以前に使用されていてメモリにロードされていますが、制限を超えると解放されます。 通常のファイルの場合、シークしながらメモリをロードして解放することで、メモリと速度を節約することができます。
通常ファイル以外 seek できないファイル（パイプや圧縮ファイル）も Chunk 単位で管理していますが、一度解放するとメモリにロードすることはできないため、できるだけメモリにロードします。 メモリ制限がある場合は、メモリ制限まで読み込んでから読み込みを一時停止します。
例えば、41230行に移動すると、Chunk1、Chunk2、Chunk3が解放され、現在の位置から先読みされます。
メモリ制限 通常ファイルのデフォルトのメモリ制限は100（100万行）です。 あまり変更する必要はないと思いますが、--memory-limit-file で指定することができます。
ov --memory-limit-file 10 large.log 通常ファイル以外のメモリ制限のデフォルトは-1（無制限）です。
メモリ不足を避けるためにメモリに応じて制限したほうがよいでしょう。 ov.yaml に MemoryLimit: 10000(or 1000) のように設定することをお勧めします。
MemoryLimit: 10000 コマンドラインオプションでも --memory-limit 1000 のように指定できます。
command | ov --memory-limit 1000 メモリ制限オプションを指定しても、大きなファイルはメモリを多く使用します。 GCを頻繁に実行するために GOMEMLIMIT を設定すると、一時的なメモリの増加も抑制されます。
export GOMEMLIMIT=400MiB ov --memory-limit-file 10 large.log</description></item></channel></rss>