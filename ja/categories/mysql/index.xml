<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on 斉藤登のページ</title><link>https://noborus.github.io/ja/categories/mysql/index.html</link><description>Recent content in mysql on 斉藤登のページ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 10 Feb 2020 15:09:00 +0900</lastBuildDate><atom:link href="https://noborus.github.io/ja/categories/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL の LOAD DATA INFILE (go)</title><link>https://noborus.github.io/ja/blog/mysql-load/index.html</link><pubDate>Mon, 10 Feb 2020 15:09:00 +0900</pubDate><guid>https://noborus.github.io/ja/blog/mysql-load/index.html</guid><description>前提 LOAD DATA INFILEはMySQLサーバーがファイルを読み取ってデータベースのテーブルにインポートする構文ですが、LOAD DATA LOCAL INFILEはクライアント側のファイル（の内容）をサーバー側に送信してインポートします。
このLOCAL指定ですが、セキュリティ上の問題を抱えているため、最近のバージョンだとデフォルトで使用できない設定に変更されたりしています。
そもそも LOAD DATA LOCAL INFILE の仕組みは、MySQLのLOAD DATA構文を（クライアント側ではパースして解釈しないので）サーバー側に送ってLOCAL INFILEの場合ファイル名をクライアントに伝えて、クライアントがそのファイル（の中身）をサーバー側に送信するようになっています。
サーバー側からLOAD DATA LOCAL INFILEに書いてあったファイル名とは違うファイル名を伝えられてもそのファイルを送信してしまう可能性があるため、セキュリティのリスクがあります。
LOAD DATA LOCAL INFILE(go) goのmysqlドライバでは、LOAD DATA LOCAL INFILE supportにあるように mysql.RegisterLocalFile(filepath)やmysql.RegisterReaderHandler(name, handler)という関数が追加されていてセキュリティ上の問題を解決するような拡張がされています。
mysql.RegisterLocalFile(filepath)は、LOAD DATA LOCAL INFILEを実行する前にあらかじめ送信するファイル名を登録しておいて、登録してあるファイルのみを送信することでリスクを軽減しています。
mysql.RegisterLocalFile(&amp;#34;/tmp/test.csv&amp;#34;) db.Exec(&amp;#34;LOAD DATA LOCAL INFILE &amp;#39;/tmp/test.csv&amp;#39; INTO TABLE test&amp;#34;)また、mysql.RegisterReaderHandler(name, handler)では、あらかじめクライアントプログラム側がファイルを開く等してできたio.Readerインターフェイスを&amp;lt;name&amp;gt;と共に登録しておき、LOAD DATA LOCAL INFILE 'Reader::\&amp;lt;name\&amp;gt;' INTO TABLE テーブル名 によりio.ReaderからReadしてサーバー側に送信します。
mysql.RegisterReaderHandler(&amp;#34;test&amp;#34;, func() io.Reader { file, err = os.Open(&amp;#34;/tmp/test.csv&amp;#34;) if err != nil { return nil } return file }) db.</description></item></channel></rss>