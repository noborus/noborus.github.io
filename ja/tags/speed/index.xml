<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>speed on 斉藤登のページ</title><link>https://noborus.github.io/ja/tags/speed/index.html</link><description>Recent content in speed on 斉藤登のページ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://noborus.github.io/ja/tags/speed/index.xml" rel="self" type="application/rss+xml"/><item><title>速度</title><link>https://noborus.github.io/ja/ov/speed/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://noborus.github.io/ja/ov/speed/index.html</guid><description>多くのページャーはファイルを全部読み込む前に表示を開始するため、単純な速度比較は難しいですが、最後尾に移動したり行数が必要な処理（行番号の表示等）をする場合は、ファイル全体を読む必要があり速度に差が出ます。
ovは、大きなファイルを読み込むときには、ファイルの先頭以外は行数と位置を記録して後で読み直せるようにするため、メモリ使用量を抑えて、速度も速く動作します。 また、ファイル操作は別のゴルーチンがおこなうため、ファイルの読み込みが発生しても操作がブロックされることはありません。
そのため、大きなファイルを開いても操作によって待たされることが無いようになっています。
lessと比較してみます。
ovは、大きなファイルではメモリに読み込まずにカウントと記録だけおこなうため、全行数のカウントが早く終わります。行数が把握できるとそこからすぐに最後尾に移動できるため操作が止まることはありません。
また、全行数を読み込む前であってもlessのように最後尾に移動する場合は、先に最後尾に移動してからカウントを再開するため、最後尾に移動するのも即座に可能です。</description></item></channel></rss>