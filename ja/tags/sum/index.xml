<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sum on 斉藤登のページ</title><link>https://noborus.github.io/ja/tags/sum/index.html</link><description>Recent content in sum on 斉藤登のページ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 06 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://noborus.github.io/ja/tags/sum/index.xml" rel="self" type="application/rss+xml"/><item><title>trdsql 集計計算</title><link>https://noborus.github.io/ja/trdsql/06_calculation/index.html</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/ja/trdsql/06_calculation/index.html</guid><description>集計計算 集計には、COUNT()だけでなく集計計算することも当然できます。SQLには数値に対して計算をおこなう集計関数があらかじめ揃っています。
ここでは以下のようなCSVファイルを例に説明します。
name,price apple,100 orange,50 melon,500 apple,90 apple,90 orange,40 orange,40 SUM 合計を計算します。price列をすべて足します。
trdsql -ih &amp;#34;SELECT SUM(price) FROM sample.csv&amp;#34; 910 前にも書いたようにtrdsqlは列をテキスト型として扱いますので、本来はCASTして数値型にしてから計算する必要があります。ただ、集計の関数を使用する場合は、暗黙のCASTがされて省略できる場合があります（使用するデータベースによります）。
明示的にCASTする場合は以下のようにします。
trdsql -ih &amp;#34;SELECT SUM(CAST(price AS int)) FROM sample.csv&amp;#34; 910 AVG 平均を計算します。合計/件数で計算できますが、関数が用意されているので、使用したほうがわかりやすく書けます。この例では、平均の意味はそれほどないかもしれませんが。
trdsql -ih &amp;#34;SELECT AVG(CAST(price AS int)) FROM sample.csv&amp;#34; 130 MIN,MAX 最小値や最大値を出力します。
trdsql -ih -oh &amp;#34;SELECT MIN(CAST(price AS INT)),MAX(CAST(price AS INT)) FROM sample.csv&amp;#34; MIN(CAST(price AS INT)),MAX(CAST(price AS INT)) 40,500 MINやMAXはテキスト型でも使用できるため、明示的にCASTする必要があります。
（MINやMAXのnameを知りたくなるところですが、SQLだとちょっと複雑になるので後に回します）。
前回書いたように、集計関数は一度に実行できます。
trdsql -ih -oat &amp;#34;SELECT COUNT(name) as count, COUNT(DISTINCT name) as uniq, MIN(CAST(price AS INT)) AS min, MAX(CAST(price AS INT)) as max, SUM(CAST(price AS INT)) as sum, AVG(CAST(price AS INT)) as avg FROM sample.</description></item><item><title>trdsql 集計計算</title><link>https://noborus.github.io/ja/blog/06_calculation/index.html</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><guid>https://noborus.github.io/ja/blog/06_calculation/index.html</guid><description>集計計算 集計には、COUNT()だけでなく集計計算することも当然できます。SQLには数値に対して計算をおこなう集計関数があらかじめ揃っています。
ここでは以下のようなCSVファイルを例に説明します。
name,price apple,100 orange,50 melon,500 apple,90 apple,90 orange,40 orange,40 SUM 合計を計算します。price列をすべて足します。
trdsql -ih &amp;#34;SELECT SUM(price) FROM sample.csv&amp;#34; 910 前にも書いたようにtrdsqlは列をテキスト型として扱いますので、本来はCASTして数値型にしてから計算する必要があります。ただ、集計の関数を使用する場合は、暗黙のCASTがされて省略できる場合があります（使用するデータベースによります）。
明示的にCASTする場合は以下のようにします。
trdsql -ih &amp;#34;SELECT SUM(CAST(price AS int)) FROM sample.csv&amp;#34; 910 AVG 平均を計算します。合計/件数で計算できますが、関数が用意されているので、使用したほうがわかりやすく書けます。この例では、平均の意味はそれほどないかもしれませんが。
trdsql -ih &amp;#34;SELECT AVG(CAST(price AS int)) FROM sample.csv&amp;#34; 130 MIN,MAX 最小値や最大値を出力します。
trdsql -ih -oh &amp;#34;SELECT MIN(CAST(price AS INT)),MAX(CAST(price AS INT)) FROM sample.csv&amp;#34; MIN(CAST(price AS INT)),MAX(CAST(price AS INT)) 40,500 MINやMAXはテキスト型でも使用できるため、明示的にCASTする必要があります。
（MINやMAXのnameを知りたくなるところですが、SQLだとちょっと複雑になるので後に回します）。
前回書いたように、集計関数は一度に実行できます。
trdsql -ih -oat &amp;#34;SELECT COUNT(name) as count, COUNT(DISTINCT name) as uniq, MIN(CAST(price AS INT)) AS min, MAX(CAST(price AS INT)) as max, SUM(CAST(price AS INT)) as sum, AVG(CAST(price AS INT)) as avg FROM sample.</description></item></channel></rss>