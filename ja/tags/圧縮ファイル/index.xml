<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>圧縮ファイル on 斉藤登のページ</title>
    <link>https://noborus.github.io/ja/tags/%E5%9C%A7%E7%B8%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB/index.html</link>
    <description>Recent content in 圧縮ファイル on 斉藤登のページ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 02 Mar 2020 17:52:00 +0900</lastBuildDate>
    <atom:link href="https://noborus.github.io/ja/tags/%E5%9C%A7%E7%B8%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>trdsql 圧縮ファイル</title>
      <link>https://noborus.github.io/ja/trdsql/33_compression/index.html</link>
      <pubDate>Mon, 02 Mar 2020 17:52:00 +0900</pubDate>
      <guid>https://noborus.github.io/ja/trdsql/33_compression/index.html</guid>
      <description>圧縮ファイルに実行 0.7.4までは gzip(.gz)の圧縮形式のみの対応でしたが、最新のmaster(0.7.5以降の予定)では、gzip(gz)、bzip2(bz2)、zstd(zst)、lz4、xzの圧縮形式に対応しました。
従来は.gzの拡張子をみて判断していましたが、今回から圧縮形式のファイルの先頭のマジックナンバー（signatureの値）を見て判断するようになりました。そのため、拡張子が何であっても上記の圧縮形式はそのまま読み取ることが出来ます。
圧縮率にもよりますが、デフォルトレベルのzstdでの圧縮されたファイルをtrdsqlで処理すると、手元のマシンでの処理時間はほぼ変わらないか、少しzstdで圧縮されているファイルのほうが早いくらいです。
例えば以下のような145MBのファイルに対してzstdで圧縮すると44MBになりました。
145M worldcitiespop.csv 44M worldcitiespop.csv.zst timeを付けての結果は以下のようになりました。
/usr/bin/time -p trdsql -ih &amp;#34;SELECT count(*) FROM worldcitiespop.csv&amp;#34; real 11.47 user 11.76 sys 0.70 zstd圧縮
/usr/bin/time -p trdsql -ih &amp;#34;SELECT count(*) FROM worldcitiespop.csv.zst&amp;#34; real 9.76 user 11.00 sys 0.37 LTSVファイルでは、同じ内容のCSVファイルよりもファイルサイズが大きくなりますが、圧縮効率は良いので圧縮したときのファイルサイズの差は小さくなります。
330M worldcitiespop.ltsv 54M worldcitiespop.ltsv.zst 145MBをLTSVにすると330MBのファイルになっていたのが、圧縮するとCSV:44MB、LTSV:54MBになります。
処理時間は以下のようになりました。
/usr/bin/time -p trdsql &amp;#34;SELECT count(*) FROM worldcitiespop.ltsv real 16.72 user 17.41 sys 1.05 /usr/bin/time -p trdsql &amp;#34;SELECT count(*) FROM worldcitiespop.ltsv.zst&amp;#34; 3173958 real 13.93 user 16.</description>
    </item>
    <item>
      <title>trdsql 圧縮ファイル</title>
      <link>https://noborus.github.io/ja/blog/33_compression/index.html</link>
      <pubDate>Mon, 02 Mar 2020 17:52:00 +0900</pubDate>
      <guid>https://noborus.github.io/ja/blog/33_compression/index.html</guid>
      <description>圧縮ファイルに実行 0.7.4までは gzip(.gz)の圧縮形式のみの対応でしたが、最新のmaster(0.7.5以降の予定)では、gzip(gz)、bzip2(bz2)、zstd(zst)、lz4、xzの圧縮形式に対応しました。
従来は.gzの拡張子をみて判断していましたが、今回から圧縮形式のファイルの先頭のマジックナンバー（signatureの値）を見て判断するようになりました。そのため、拡張子が何であっても上記の圧縮形式はそのまま読み取ることが出来ます。
圧縮率にもよりますが、デフォルトレベルのzstdでの圧縮されたファイルをtrdsqlで処理すると、手元のマシンでの処理時間はほぼ変わらないか、少しzstdで圧縮されているファイルのほうが早いくらいです。
例えば以下のような145MBのファイルに対してzstdで圧縮すると44MBになりました。
145M worldcitiespop.csv 44M worldcitiespop.csv.zst timeを付けての結果は以下のようになりました。
/usr/bin/time -p trdsql -ih &amp;#34;SELECT count(*) FROM worldcitiespop.csv&amp;#34; real 11.47 user 11.76 sys 0.70 zstd圧縮
/usr/bin/time -p trdsql -ih &amp;#34;SELECT count(*) FROM worldcitiespop.csv.zst&amp;#34; real 9.76 user 11.00 sys 0.37 LTSVファイルでは、同じ内容のCSVファイルよりもファイルサイズが大きくなりますが、圧縮効率は良いので圧縮したときのファイルサイズの差は小さくなります。
330M worldcitiespop.ltsv 54M worldcitiespop.ltsv.zst 145MBをLTSVにすると330MBのファイルになっていたのが、圧縮するとCSV:44MB、LTSV:54MBになります。
処理時間は以下のようになりました。
/usr/bin/time -p trdsql &amp;#34;SELECT count(*) FROM worldcitiespop.ltsv real 16.72 user 17.41 sys 1.05 /usr/bin/time -p trdsql &amp;#34;SELECT count(*) FROM worldcitiespop.ltsv.zst&amp;#34; 3173958 real 13.93 user 16.</description>
    </item>
  </channel>
</rss>